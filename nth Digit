-- C언어
#include <stdio.h>

int find_Nth_Digit(int n) {
    unsigned int i, j, k;
    i = j = 1;
    while (n > 9 * i * j) {
        n -= 9 * i * j;
        j *= 10;
        i ++;
    }
    k = j + (n - 1) / i;
    for (j = (n - 1) % i; j < i - 1; j ++) {
        k = k / 10;
    }
    return k % 10;
}

int main(void)
{
  int n = 7;
  printf("\n%d digit of the sequence is %d",n,find_Nth_Digit(n));
  n = 12;
  printf("\n%d digit of the sequence is %d",n,find_Nth_Digit(n));
  return 0;    
}





--Python3

class Solution(object):
    def findNthDigit(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 9: return n
        i, p = 1, 9
        while True:
            n += p
            p = p * 10 + 9
            i += 1
            if n < p * i:
                return int(str(int((n + i - 1) // i))[(n + i - 1) % i])
            
            
            







-- Python


class Solution:
    def findNthDigit(self, n: int) -> int:
        if n < 10:
            return n
        # find the digit of n
        digit = 0
        tmp = 0
        pre = 0
        while tmp < n:
            pre = tmp
            digit += 1
            tmp += (9*(10**(digit-1)))*digit
        # find where it belongs
        n -= pre
        num = 10**(digit-1) + ((n-1)//digit)
        # find the index
        index = (n-1)%digit
        return num//(10**(digit-index-1))%10
        
        
        
        
        
    
    
    
--Python


public class Solution {
    public int findNthDigit(int n) {
        int len = 1;
        long count = 9;
        int start = 1;

        while (n > len * count) {
            n -= len * count;
            len += 1;
            count *= 10;
            start *= 10;
        }

        start += (n - 1) / len;
        String s = Integer.toString(start);
        return Character.getNumericValue(s.charAt((n - 1) % len));
    }
}





